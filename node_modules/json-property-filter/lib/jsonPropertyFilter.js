"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var serializeToArray_1 = require("./serializer/serializeToArray");
var extractFilters_1 = require("./extractFilters");
var jsonExcludePropertyFilter_1 = require("./filter/jsonExcludePropertyFilter");
var jsonIncludePropertyFilter_1 = require("./filter/jsonIncludePropertyFilter");
var serializeToObject_1 = require("./serializer/serializeToObject");
var JsonPropertyFilter = (function () {
    function JsonPropertyFilter(filters, separator, excludeSymbols, includeSymbols) {
        this._excludeFilters = [];
        this._includeFilters = [];
        if (filters) {
            this.setExcludeFilters(filters, separator, excludeSymbols);
            this.setIncludeFilters(filters, separator, includeSymbols);
        }
    }
    Object.defineProperty(JsonPropertyFilter.prototype, "excludeFilters", {
        get: function () {
            return this._excludeFilters;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonPropertyFilter.prototype, "includeFilters", {
        get: function () {
            return this._includeFilters;
        },
        enumerable: true,
        configurable: true
    });
    JsonPropertyFilter.prototype.apply = function (source) {
        var keys = serializeToArray_1.serializeToArray(source);
        var filtered = [];
        filtered = this._applyInclude(keys);
        filtered = this._applyExcludeFilters(filtered);
        return serializeToObject_1.serializeToObject(filtered);
    };
    JsonPropertyFilter.prototype.setExcludeFilters = function (filters, separator, symbols) {
        this._assertFilters(filters);
        this._assertSeparator(separator);
        var formattedProperties = this._formatProperties(filters, separator);
        var excludeSymbols = symbols || [JsonPropertyFilter.EXCLUDE_SYMBOL];
        this._excludeFilters = extractFilters_1.extractFilters(formattedProperties, excludeSymbols);
    };
    JsonPropertyFilter.prototype.setIncludeFilters = function (filters, separator, symbols) {
        this._assertFilters(filters);
        this._assertSeparator(separator);
        var formattedProperties = this._formatProperties(filters, separator);
        var includeSymbols = symbols || [
            JsonPropertyFilter.INCLUDE_SYMBOL,
            JsonPropertyFilter.DEFAULT_INCLUDE_SYMBOL,
        ];
        this._includeFilters = extractFilters_1.extractFilters(formattedProperties, includeSymbols);
    };
    JsonPropertyFilter.prototype._applyInclude = function (source) {
        var include = new jsonIncludePropertyFilter_1.JsonIncludePropertyFilter(this._includeFilters);
        return include.apply(source);
    };
    JsonPropertyFilter.prototype._applyExcludeFilters = function (source) {
        var exclude = new jsonExcludePropertyFilter_1.JsonExcludePropertyFilter(this._excludeFilters);
        return exclude.apply(source);
    };
    JsonPropertyFilter.prototype._assertFilters = function (filters) {
        if (!Array.isArray(filters) && typeof filters !== "string") {
            throw new TypeError("Parameter 'filters' is not a string or array type.");
        }
    };
    JsonPropertyFilter.prototype._assertSeparator = function (separator) {
        if (separator && typeof separator !== "string") {
            throw new TypeError("Parameter 'separator' is not a string type.");
        }
    };
    JsonPropertyFilter.prototype._formatProperties = function (properties, separator) {
        if (typeof properties === "string") {
            var separatorFilters = separator || JsonPropertyFilter.FILTER_SEPARATOR;
            return properties.split(separatorFilters);
        }
        else {
            return properties;
        }
    };
    JsonPropertyFilter.DEFAULT_INCLUDE_SYMBOL = /^()[^+-]/g;
    JsonPropertyFilter.EXCLUDE_SYMBOL = /^(\-)/g;
    JsonPropertyFilter.FILTER_SEPARATOR = ",";
    JsonPropertyFilter.INCLUDE_SYMBOL = /^(\+)/g;
    return JsonPropertyFilter;
}());
exports.JsonPropertyFilter = JsonPropertyFilter;
