"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isArray_1 = require("./object/isArray");
function _serialize(jsonObject, index, key, value, path) {
    var currentKey = path[index];
    var arrayFormat = /\[([0-9]+)\]$/;
    if (arrayFormat.test(currentKey)) {
        return _serializeArray(jsonObject, index, currentKey, value, path, arrayFormat);
    }
    else {
        return _serializeObject(jsonObject, index, currentKey, value, path);
    }
}
function _serializeObject(jsonObject, index, key, value, path) {
    if (typeof jsonObject === "object") {
        if (!(key in jsonObject)) {
            jsonObject[key] = jsonObject[key] || {};
        }
        var pathLength = path.length - 1;
        if (index === pathLength) {
            jsonObject[key] = value;
        }
        else {
            jsonObject[key] = jsonObject[key] || {};
            jsonObject = jsonObject[key];
        }
    }
    return jsonObject;
}
function _serializeArray(jsonObject, index, key, value, path, arrayFormat) {
    var arrayIndex = key.match(arrayFormat)[1];
    var formattedCurrentKey = key.replace(arrayFormat, "");
    var indexNextItem = index + 1;
    if (formattedCurrentKey) {
        jsonObject[formattedCurrentKey] = jsonObject[formattedCurrentKey] || [];
        if (indexNextItem < path.length) {
            jsonObject[formattedCurrentKey][arrayIndex] = jsonObject[formattedCurrentKey][arrayIndex] || {};
            jsonObject = jsonObject[formattedCurrentKey][arrayIndex];
        }
        else {
            jsonObject[formattedCurrentKey][arrayIndex] = value;
        }
    }
    else {
        if (indexNextItem < path.length) {
            jsonObject[arrayIndex] = jsonObject[arrayIndex] || {};
            jsonObject = jsonObject[arrayIndex];
        }
        else {
            jsonObject[arrayIndex] = value;
        }
    }
    return jsonObject;
}
function serializeToObject(arr) {
    var jsonObject = {};
    if (isArray_1.isArray(arr)) {
        jsonObject = [];
    }
    for (var key in arr) {
        if (key) {
            var value = arr[key];
            var path = key.split(".");
            var currentJsonObject = jsonObject;
            for (var index = 0; index < path.length; index++) {
                currentJsonObject = _serialize(currentJsonObject, index, key, value, path);
            }
        }
    }
    return jsonObject;
}
exports.serializeToObject = serializeToObject;
