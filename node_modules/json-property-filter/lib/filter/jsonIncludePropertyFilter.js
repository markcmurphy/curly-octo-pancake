"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var JsonIncludePropertyFilter = (function () {
    function JsonIncludePropertyFilter(_properties) {
        this._properties = _properties;
    }
    JsonIncludePropertyFilter.prototype.apply = function (source) {
        if (this._properties.length) {
            var destination = [];
            for (var _i = 0, _a = this._properties; _i < _a.length; _i++) {
                var rule = _a[_i];
                this._include(rule, source, destination);
            }
            return destination;
        }
        else {
            return source;
        }
    };
    JsonIncludePropertyFilter.prototype._include = function (rule, source, destination) {
        if (rule.match(JsonIncludePropertyFilter.ALL_PROPERTIES_REGEX)) {
            this._includeProperties(rule, source, destination);
        }
        else if (rule.match(JsonIncludePropertyFilter.ALL_ELEMENT_PROPERTIES_REGEX)) {
            this._includeRootProperties(rule, source, destination);
        }
        else {
            this._includeSpecificPath(rule, source, destination);
        }
    };
    JsonIncludePropertyFilter.prototype._includeProperty = function (rule, path, value, destination) {
        var cleanPath = this._removeArrayIndexStart(path);
        var regexp = "^" + rule.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
        if (cleanPath.match(regexp)) {
            destination[path] = value;
        }
    };
    JsonIncludePropertyFilter.prototype._includeProperties = function (rule, source, destination) {
        var formattedRule = rule.substr(0, rule.length - 2);
        for (var path in source) {
            if (path) {
                var value = source[path];
                this._includeProperty(formattedRule, path, value, destination);
            }
        }
    };
    JsonIncludePropertyFilter.prototype._includeRootProperty = function (rule, path, value, source, destination) {
        var pathWithoutArrayIndexStart = this._removeArrayIndexStart(path);
        if (rule === JsonIncludePropertyFilter.STRING_EMPTY) {
            var splittedPath = pathWithoutArrayIndexStart.split(JsonIncludePropertyFilter.PATH_SEPARATOR);
            if (splittedPath.length === 1) {
                destination[path] = value;
            }
        }
        else {
            var regexp = "^" + rule.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
            if (pathWithoutArrayIndexStart.match(regexp)) {
                var pathItems = pathWithoutArrayIndexStart.split(JsonIncludePropertyFilter.PATH_SEPARATOR);
                var ruleItems = rule.split(JsonIncludePropertyFilter.PATH_SEPARATOR);
                if (pathItems.length === ruleItems.length) {
                    destination[path] = value;
                }
            }
        }
    };
    JsonIncludePropertyFilter.prototype._includeRootProperties = function (rule, source, destination) {
        var ruleWithoutRootSymbol = rule.substr(0, rule.length - 1);
        for (var path in source) {
            if (path) {
                var value = source[path];
                this._includeRootProperty(ruleWithoutRootSymbol, path, value, source, destination);
            }
        }
    };
    JsonIncludePropertyFilter.prototype._includeSpecificPath = function (rule, source, destination) {
        for (var path in source) {
            if (path) {
                var pathWithoutArrayIndexStart = this._removeArrayIndexStart(path);
                var pathWithoutIndex = this._removeArrayIndex(pathWithoutArrayIndexStart);
                var regexp = "^" + rule;
                if (pathWithoutIndex.match(regexp)) {
                    destination[path] = source[path];
                }
            }
        }
    };
    JsonIncludePropertyFilter.prototype._removeArrayIndex = function (path) {
        return path.replace(JsonIncludePropertyFilter.ARRAY_INDEX, JsonIncludePropertyFilter.STRING_EMPTY);
    };
    JsonIncludePropertyFilter.prototype._removeArrayIndexStart = function (path) {
        return path.replace(JsonIncludePropertyFilter.ARRAY_INDEX_START, JsonIncludePropertyFilter.STRING_EMPTY);
    };
    JsonIncludePropertyFilter.ALL_PROPERTIES_REGEX = /\*\*$/g;
    JsonIncludePropertyFilter.ALL_ELEMENT_PROPERTIES_REGEX = /\*$/g;
    JsonIncludePropertyFilter.ARRAY_INDEX = /\[[0-9]+\]/g;
    JsonIncludePropertyFilter.ARRAY_INDEX_START = /^\[([0-9]+)\]\./;
    JsonIncludePropertyFilter.PATH_SEPARATOR = ".";
    JsonIncludePropertyFilter.STRING_EMPTY = "";
    return JsonIncludePropertyFilter;
}());
exports.JsonIncludePropertyFilter = JsonIncludePropertyFilter;
